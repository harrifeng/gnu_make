#+OPTIONS: ^:nil
* 概述
* GNU make 介绍
** Makefile简介
   + 以下情况的文件会被重新编译:
     1) 所有源文件都没有被编译过, 则所有都编译生成可执行程序
     2) 每一个上次执行make之后修改过的c源代码文件,本次make的时候会重新编译
     3) 头文件被修改,则所有包含此投文件的c源文件在下次make的时候都会被重新编译
** Mekfile规则介绍
   + 所有Makefile命令都满足如下规则
     #+begin_example
       TARGET...:PREREQUISITES...
       [TAB]COMMAND
     #+end_example
** 简单的示例
   + 最终编译出edit
     #+begin_src makefile
       # sample Makefile
       edit : main.o kdb.o command.o display.o \
              insert.o search.o files.o utils.o
           cc -o edit main.o kdb.o command.o display.o \
                      insert.o search.o files.o utils.o
       main.o : main.c defs.h
           cc -c main.c
       kdb.o : kdb.c defs.h command.h
           cc -c kdb.c
       command.o : command.c defs.h command.h
           cc -c command.c
       display.o :display.c defs.h buffer.h
           cc -c display.c
       insert.o : insert.c defs.h buffer.h
           cc -c insert.c
       serach.o : search.c defs.h buffer.h
           cc -c search.c
       file.o : files.c defs.h buffer.h command.h
           cc -c files.c
       utils.o : utils.c defs.h
           cc -c utils.c
       clean :
           rm edit main.o kbd.o command.o display.o \
                   insert.o search.o files.o utils.o
     #+end_src
   + 当规则的目标是一个文件的时候, 在它的任何一个依赖文件被修改以后,在执行
     make的时候, 这个目标文件将会被重新编译或者重新连接.
   + 目标clean不是一个五年级,它仅仅代表执行一个动作的标示. 而且目标clean没有
     任何的依赖文件夹,只有一个目的,就是通过这个目标名来执行它所定义的命令. 那么
     *Makefile中把那些没有任何依赖只有执行动作的目标称为"伪目标"(phony targets)*
** Make如何工作
   + 默认情况下make执行的是Makefile中的第一个规则,比如上面例子中就是edit
   + 以上面为例:
     1) 目标的.o文件不存在, 使用其规则创建它们
     2) 目标.o文件存在, 目标.o文件所依赖的.c源文件.h文件中任何一个比.o文件"更新", 
        那就根据规则重新编译它们
     3) 目标.o文件存在, 目标.o文件比它任何一个依赖文件都"更新", 那就什么也不做.
** 指定变量
   + 上面例子的最开始部门,我们可以看到.o文件列表出现了两次, 这个明显的触犯了DRY
     (Don't Repeat Yourself)规则, 这就引入了makefile中的变量概念
     #+begin_src makefile
       ,#+begin_src makefile
       # sample Makefile
       edit : main.o kdb.o command.o display.o \
              insert.o search.o files.o utils.o
           cc -o edit main.o kdb.o command.o display.o \
                 insert.o search.o files.o utils.o
     #+end_src
   + 我们可以改成
     #+begin_src makefile
       objects = main.o kdb.o command.o display.o \
              insert.o search.o files.o utils.o
       edit : $(objects)
           cc -o edit $(objects)
       clean :
           rm edit $(objects)
     #+end_src
** 自动推导规则
   + 既然是计算机,那么自动推导规则(从main.c生成main.o)这个还是能搞定的.
     #+begin_src makefile
       objects = main.o kdb.o command.o display.o \
              insert.o search.o files.o utils.o
       edit : $(objects)
           cc -o edit $(objects)
       main.o : defs.h
       kbd.o : defs.h command.h
       command.o : defs.h command.h
       display.o : defs.h buffer.h
       insert.o : defs.h buffer.h
       search.o : defs.h buffer.h
       files.o : defs.h buffer.h
       utils.o : defs.h
       
       .PHONY : clean
       clean :
           rm edit $(objects)
     #+end_src
** 另类风格的makefile
   + 我们也可以如下创建makefile
     #+begin_src makefile
       objects = main.o kdb.o command.o display.o \
              insert.o search.o files.o utils.o
       edit : $(objects)
           cc -o edit $(objects)
       $(objects):defs.h
       kdb.o command.o files.o : command.h
       display.o insert.o search.o files.o : buffer.h
       
       clean :
           rm edit $(objects)
     #+end_src
   + 但是上面这种风格是不值得推荐的,因为makefile规则的建议原则是*单目标,多依赖*, 
     这样书写会方便后期的维护
** 清除工作目录过程文件
   + 实际应用中,我们要把clean规则如下书写
     #+begin_src makefile
       .PHONY : clean
       # 实践证明-rm是不好使的,还是rm -rf好使
       clean :
           rm -rf edit $(objects)
     #+end_src
* Makefile 总述
** Makefile的内容
   + 一个完整的makefile文件其实也就是包括下面的五个部分:
     1) 显示规则: 描述了如何在多种情况下更新一个或者多个被称之为目标的文件, 书写
        makefile的时候, 需要明确的给出目标文件, 目标的依赖文件列表, 以及更新目标
        文件所需要的命令(也有些规则没有命令, 这样的规则只是纯粹的描述了文件直接的
        依赖关系), 这个规则要求啥都写出来.
     2) 隐含规则:它是make根据一类文件(主要就是文件名后缀)而自动推导出来的规则.make
        根据目标文件名,自动产生目标依赖文件
     3) 变量定义:为了防止DRY, 我们定义了变量
     4) Makefile指示符:
        + 读取文件
        + 决定处理或者忽略Makefile中的某一个特定部分
     5) 注释:也就是#后面的部分
** makefile文件的命名:
   + 默认情况下, make会在工作目录下按照如下文件搜索执行文件: "GNUmakefile", "makefile"
     "Makefile"
   + 如果都没有上面的文件名,那么就是用make -f, make -file来指定读取
** 包含其他makefile文件
   + 首先注意*include后面的文件没有双引号*
   + include告诉make暂停读取当前的Makefile, 转而读取include指定的一个或者多个文件.
     完成以后再继续读取当前Makefile的读取.*这也就意味着B文件在一开始就引用A文件, 
     那么B文件的默认规则不是B文件最开始的规则,而是A的默认规则*
   + FILENAMES支持扩展
     #+begin_src makefile
       include foo *.mk $(bar)
       # 等同于
       include foo a.mk b.mk c.mk bish bash
     #+end_src
   + 通常情况下, include用在下面两个场合:
     1) 有多个不同的程序, 由不同目录下面的几个独立的Makefile来描述其重建规则. 它们
        需要使用一组通用的变量定义. 那就将所有的共同变量放到一个文件lim,然后include
        它们
     2) 当根据文件自动产生依赖文件的时候,我们可以将自动产生的依赖关系保存在另外一个
        文件中, 主Makefile使用指示符"include"包含这些文件. 这样的做法比直接在主
        Makefile中追加依赖文件的方法要明智的多.
** 变量MAKEFILES
   + 如果当前环境定义了环境变量MAKEFILES的话, make会首先将此环境变量的值作为需要读入
     的Makefile文件, 和include区别:
     1) 环境变量指定的makefile中的目标不会被作为make执行的终极目标
     2) 环境变量所定义的文件列表,在执行make时, 如果不能找到其中一个文件, make不会
        提示错误
     3) make在执行时候,首先读取的环境变量"MAKEFILES" 所指的文件列表
   + MAKEFILES很少设置,因为设置会导致混乱, 推荐使用include来实现
** 变量MAKEFILE_LIST
   + make程序在读取多个makefile时候, (包括MAKEFILES指定, include包括的文件),在对
     这些文件进行解析执行之前make读取的文件名将会被自动追加到变量MAKEFILE_LIST的定义
     域中. 所以我们可以通过对MAKEFILE_LIST进行处理来取得当前文件名
     #+begin_src makefile
       name1 := $(word $(words $(MAKEFILE_LIST)), $(MAKEFILE_LIST))
       # some file in current folder, called inc.mk
       include inc.mk
       name2 := $(word $(words $(MAKEFILE_LIST)), $(MAKEFILE_LIST))
       
       all:
           @echo name1 = $(name1)
           @echo name2 = $(name2)
       
       #---------output---------
       # name1 = Makefile
       # name2 = inc.mk    
     #+end_src
** 其他特殊变量
   + GNU make支持一个特殊的变量".VARIABLES", 他不能通过其他途径给予赋值, 展开以后
     他的值是在这个变量引用之前的,所有定义的全局变量的列表
** makefile文件的重建
   + 存疑
** 重载另外一个makefile
   + 有些情况下,makefile-A需要使用另外一个makefile-B中所定义的变量和规则. 最简单
     的做法,当然是在makefile-A中include文件makefile-B, 但是使用这种方法,如果两
     个makefile文件中村咋相同的目标(而规则不同),那么就会与make的要求想左.
   + 为了解决上述问题,可以使用make中的"%"匹配所有规则的方法,如下:
     #+begin_src makefile
       #sample GNUmakefile
       foo:
           frobnicate > foo
       %:force
           @$(MAKE) -f Makefile $@
       force:;
     #+end_src
   + 上面例子是GUNmake文件的内容, 如果我们make foo, 那么就会自动执行 frobnicate,
     如果我们执行make bar, 当前文件下没有bar这个目标,那么就会对应到"%", 也就是会
     去make -f Makefile, 也就是去Makefile文件里面找bar.
   + 如果Makefile里面有foo目标了怎么办? 没事,因为那样的话就不会去读取Makefile了
   + 如果细心观察会发现%(所有模式匹配规则)还依赖了一个force: 这样保证了及时目标文件
     已经存在(比如bar已经存在了), 依然还是会去执行这个规则(因为依赖force是新的, 就
     必须重新执行).
   + 而force规则则只使用了空命令: 这是为了防止make试图寻找一个规则去创建force的时候,
     又引用了%:force而陷入无限循环.
** make如何解析makefile文件
   + GUN make的执行分为两个阶段:
     1) 读取所有的makefile文件(包括MAKIFILES指定;include指定;命令行-f指定的makefile
        文件). 内建所有的变量, 明确规则,隐含规则. 并建立所有的目标和依赖之间的依赖关系
        链表
     2) 根据第一阶段建立的依赖关系链表决定哪些目标需要更新, 并使用对应的规则来重新创建
        这些目标
*** 变量取值
    + 变量定义规则有如下:
      #+begin_src makefile
        IMMEDIATE = DEFERRED
        IMMEDIATE ?= DEFERRED
        IMMEDIATE := IMMEDIATE
        IMMEDIATE += DEFERRED or IMMEDIATE
        define IMMEDIATE
            DEFERRED
        endef
      #+end_src
    + 如果一个变量使用了+=时候, 如果此前这个变量是一个简单变量(使用:=定义的), 则认为
      它是立即展开的,其他情况则都认为是"延后"展开的变量
*** 条件语句
    + 条件语句都是立即展开的,包括ifdef, ifeq, ifndef, ifneq
*** 规则的定义
    + 所有规则在执行make时, 都按照如下模式展开:
      #+begin_src makefile
        IMMEDIATE : IMMEDIATE; DEFERRED
            DEFERRED
      #+end_src
    + 规则中目标和依赖如果引用其他变量, 则立即展开. 而规则的命令行中的变量则会被延后展开
** 总结
   + make的执行过程如下:
     1) 一次读取变量MAKEFILES定义的makefile文件列表
     2) 读取工作目录下的makefile文件(根据命名的查找顺序"GNUmakefile", "makefile", 
        "Makefile", 首先找到哪个就读取哪个)
     3) 依次读取工作目录makefile文件中使用指示符include包含的文件
     4) 查找重建所有已读的makefile文件规则
     5) 初始化变量值并展开那些需要立即展开的变量和还是冰根据预设条件确定执行分支
     6) 根据"终极目标"以及其他目标的依赖关系简历依赖关系链表
     7) 执行"终极目标"以外的所有的目标的规则（根据目标文件和所有依赖文件的时间戳).
     8) 执行"终极目标＂所在的规则
* Makefile的规则
** 一个例子
   + 下面我们看一个规则的例子
     #+begin_src makefile
       foo.o : foo.c defs.h      #module for twiddling the frobs
           cc -c -g foo.c
     #+end_src
   + foo.o是要重建的文件(目标), foo.c 和 defs.h是重建foo.o所需要使用的文件(依赖).
** 规则语法
   + 通常的语法规则如下:
     #+begin_src makefile
       TARGETS : PREREQUISITES
           COMMAND
     #+end_src
   + 或者可以如下(命令在分号后面)
     #+begin_src makefile
       TARGET : PREREQUISITES ; COMMAND
           COMMAND
     #+end_src
   + TARGETS可以是文件名(推荐只有一个文件名,虽然多个也可以), 或者是一个标签(比如
     clean). TARGETS文件名可以用通配符
   + 书写规则有如下注意事项:
     1) 如果不是在分号后面加命令,而是要另起一行的话, [TAB]必须顶头
     2) Makefile中的的符合"$"有特殊含义, 规则中需要使用"$"的地方,要用"$$"代替
     3) 长度过长要用反斜杠"\"加到独立行之间.
** 依赖的类型
   + 常规的依赖我们就不说了,目标后面的依赖只要有一个时间戳近,那就一定要重新执行
   + 如果我们有些依赖不希望更新那么频繁,即便它更新了,我们也不想就此判断目标需要
     重新执行,那么我们就要用到order-only依赖, 其实就是利用管道符号(|), 管道
     后面的依赖更新不更新和目标重做不重做就没有关系了.
     #+begin_src makefile
       LIBS = libtest.a
       foo : foo.c | $(LIBS)
           $(CC) $(CFLAGS) $< -o $@ $(LIBS)
     #+end_src
** 文件名使用通配符
   + Makefile中的直接使用文件通配符(规则和bash shell一致)的情况有两种:
     1) 在规则,依赖中使用, 会在make读取makefile的时候就展开
     2) 在命令中使用,通配符会在shell执行命令的时候完成
   + 除此之外,其他上下文中都要使用函数wildcard来实现通配
*** 通配符使用举例
    + 变量定义中"object = *.o"不是表示objects代表所有.o文件, 这种情况
      需要使用"object = $(wildcar *.o)
*** 通配符存在的缺陷
    + 我们要时刻牢记通配符仅仅适合在[目标,依赖,命令]中*直接*出现, 即便变量定义了
      通配符是为[目标,依赖,命令]服务的,也常常会造成奇怪的现象,比如:
      #+begin_src makefile
        objects = *.o
        
        foo :＄(objects)
            cc =o foo $(CFLAGS) $(objects)
      #+end_src
    + 这个objects因为是为依赖服务的,所以如果当前文件夹下原来有*.o文件,那么不会报错,
      因为依赖会成功匹配当前文件夹下的所有*.o文件. 但是如果make clean 去掉.o文件,
      或者你加一个fake.o,那么make就晕了,再次的make就会引发如下错误
      #+begin_src sh
        fake.o: file not recognized: File truncated
        collect2: ld returned 1 exit status
        Makefile:5: recipe for target `edit' failed
        make: *** [edit] Error 1
      #+end_src
*** 函数wildcard
    + 解决办法当然就是wildcard啦, 需要注意的是wildcard如果找不到合适的匹配,会忽略
      模式字符,直接返回空.上面例子的解决方法如下
      #+begin_src makefile
        # sample Makefile
        objects := $(patsubst %.c, %.o, $(wildcard *.c))
        
        foo : $(objects)
            cc -o foo $(objects)
      #+end_src
    + 需要注意的是,这里的定义是用的":=", 我们现在只要知道用了函数wildcard,那么就
      推荐使用":=", 因为这个会减少递归调用的风险

      
      

     






        


** 目录搜索
   + 在较大的项目当中, 一般会将源代码和二进制文件安排在不同的目录来进行管理. 
     这种情况下, 可以使用make提供给目录搜索依赖的功能
*** 一般搜索(变量VPATH)
    + GNU make可以识别一个特殊变量"VPATH", 通过"VPATH"可以指定依赖文件的搜索
      路径, 当规则的依赖文件当前目录没有, 我们可以去VPATH找, 比如下面例子中, 
      如果foo.c存在src中, 此规则等价于"foo:src:/foo.c
      #+begin_src makefile
        VPATH=src:../headers
        foo:foo.c
      #+end_src
*** 选择性搜索(关键字vpath)
    + 关键字vpath(小写)和变量VPATH(大写)用法相似,但是更灵活:
      1) vpath PATTERN DIRECTORIES: 为所有符合PATTERN模式的文件制定搜索目录
         DIRECTORIES
      2) vpath PATTERN:清除之前为PATTERN制定的搜索目录
      3) vpath:清除所有一倍设置的文件搜索路径
    + vpath中的PATTERN一般都会有个%来进行模糊匹配:
      #+begin_src makefile
        vpath %.h ../headers
      #+end_src
*** 目标搜索的机制
    + 我们使用VPATH的时候,有可能会面临文件路径被废弃的情况,比如下面的例子. 如果
      目标不需要重建的时候,文件路径会被保留. 如果需要重建,那么所有的规则都会在
      当前目录重建(*.o,*.a都会编译到Makefile所在的目录)
    + 下面例子中,放在某个文件夹prom下, prom下面又有src, src中有sum.c和memcp.c,
      prom里面的Makefile为:
      #+begin_src makefile
        AR = ar rc
        LIBS = libtest.a
        VPATH = src
        
        libtet.a : sum.o memcp.o
            $(AR) $(ARFLAGS) $@ $^
      #+end_src
    + 上面这个例子有下面两个情况:
      1) prom和src都不存在libtest.a,那么执行make的时候会在当前目录下面创建libtest.a
         这个是我们期待的结果
      2) 如果src目录下面已经有一个libtest.a了(我们就想放到src目录下面), 如果我们改动
         代码重新编译,则.o文件和.a文件都会生成在prom文件夹下(目标完整路径在VPATH里面
         被废弃).这样一来就会有prom/src/libtest.a 和 prom/libtest.a两个文件,而且
         只有prom/libtest.a是最新的.
    + 我们使用GPATH(必须和VPATH一起使用)来更改上面的问题. 如果两个目录都不存在libtest.a, 
      那么会在当前文件夹下创建libtest.a, 如果src目录下面已经有目标文件libtest.a了的话,
      就会直接在src目录下面更新
      #+begin_src makefile
        AR = ar rc
        LIBS = libtest.a
        GPATH = src
        VPATH = src
        
        libtest.a:sum.o
            $(AR) $@ $^
      #+end_src
*** 命令行和搜索目录
    + make在执行的时候,通过目录得到的目标依赖文件可能会在其他目录中,这个时候,依赖
      文件就是文件的全称了(包括路径), 但是规则是不能总是改的,所以我们要设计出能够
      根据依赖变化的规则,主要是依赖两个自动化变量:
      1) $^ :表示所有通过目录搜索得到的依赖文件的完整路径名
      2) $@ :表示规则的目标
    + 比如下面的例子中, $^就是指的src/foo.c, 而$@就是指的foo.o
      #+begin_src makefile
        # foo.c is in the ./src folder
        VPATH = src
        foo.o : foo.c
            cc -c $(CFLAGS) $^ -o $@
      #+end_src
*** 隐含规则和搜索目录
    + 搜索目录的方法在隐含规则中同样适用
*** 库文件和搜索目录
    + Make在连接静态库(*.a),和动态链接库(*.so)也可以通过搜索目录得到, 但需要我们
      把要寻找的库文件名以"-l{name}"的形式表示出来,其中{name}是指的lib{name}去掉
      lib签证比如下面就是libcurses.a运用的情形:
      #+begin_src makefile
        foo : foo.c -lcurses
            cc $^ - o$@
      #+end_src
    + 之所以用-l{name}, 而不需要加后缀,是因为有个变量专门标记makefile寻找的库后
      缀(常用的也就是.a 和.so), 这个变量就是.LIBPATTERNS
      #+begin_src makefile
        # demo Makefile
        print :
            echo $(.LIBPATTERNS)
        
        # output
        # echo lib%.so lib%.a
        # lib%.so lib%.a
      #+end_src
    + 还是上面的例子, 寻找lib{name}文件的顺序是:
      1) 当前目录
      2) VPATH和vpath指定的目录
      3) 系统默认目录/lib, /usr/lib, PREFIX/lib(/usr/local/lib)
    + 上面例子找到curses的路径就是/usr/lib/libcurses.a
** Makefile伪目标
   + 伪目标前面见过了, 为了防止当前文件夹下面有和目标同名的文件,所以要声明伪目标
     #+begin_src makefile
       .PHONY:clean
       clean:
           rm -rf *.o temp
     #+end_src
   + 伪目标的好处:
     1) 当一个目标被声明为伪目标以后,make在执行的时候不会去试图查找隐含规则来创建
        它
     2) 不用担心目标和文件崇明导致命令失败
   + 伪目标的另外一个使用场合是在make的并行和递归执行过程中.
     #+begin_src makefile
       SUBDIRS = foo bar baz
       
       .PHONY :subdirs $(SUBDIRS)
       
       subdirs:$(SUBDIRS)
       $(SUBDIRS):
           $(MAKE) -C $@
       # force the baz run before foo
       foo : baz
     #+end_src
   + 一般情况下, 一个伪目标不会作为另外一个目标的依赖, 这是因为但给一个目标文件的
     依赖也包含伪目标的时候, 每一次执行这个规则,那么他的依赖也都会去执行.
   + 相反,伪目标却是可以拥有依赖的, 而且我们约定俗成的会设定一个all的终极目标
     #+begin_src makefile
       # sample Makefile
       all : prog1 prog2 prog3
       .PHONY : all
       
       prog1 : prog1.o utils.o
           cc -o prog1 prog1.o utils.o
       
       prog2 : prog2.o utils.o
           cc -o prog2 prog2.o utils.o
       
       prog3 : prog3.o utils.o
           cc -o prog3 prog3.o utils.o
     #+end_src
** 强制目标
   + 在非GNU版本的make中, 没有.PHONY的强制执行办法,只好用一个强制的FORCE来实现, 
     在GNU make中,不推荐使用
     #+begin_src makefile
       clean : FORCE
           rm $(objects)
       FORCE :
     #+end_src
** 空目标文件
   + 空目标文件也是伪目标文件的一个变种.
** Makefile的特殊目标
   + .PHONY:伪目标
   + .SUFFIXES: 目标.SUFFIXES的所有依赖指出了一系列在后缀规则中需要检查的后缀名
   + .DEFAULT: 目标.DEFAULT所在的规则定义的命令,用在重建那些没有具体规则的目标
   + .PRECIOUS: 目标.PRECIOUS所有的依赖文件在make过程中会被特殊处理: 当命令被中
     断时, make不会删除他们
   + .INTERMEDIATE : 目标.INTERMETIDATE的依赖文件在make时被作为中间过程文件对待.
   + .SECONDARY : 目标 .SECONDARY的依赖文件被作为中间过程文件对待.但这些文件不会
     被删除
   + .DELETE_ON_ERROR
   + .IGNORE
   + .LOW_RESOLUTION_TIME
   + .SILENT
   + .EXPORT_ALL_VARIABLES
   + .NOTPARALLEL
** 多目标
   + 一个规则如果有多个目标,那么规则所定义的命令对所有的目标有效, 也就是相当于
     多个规则:
     1) 仅需要描述依赖关系的规则,是没有命令的,比如下面这个例子中,只是给三个.o
        文件指定了依赖文件
        #+begin_src makefile
          kbd.o command.o files.o : command.h 
        #+end_src
     2) 多个目标的重建命令类似,也可以使用哪个$@来引用具体目标
        #+begin_src makefile
          bigoutput litteoutput : text.g
              generate text.g -$(subst outpu,,$@) > $@
          
          # equals to following
          bigoutput : text.g
              generate text.g -big > bigoutput
          littleoutput : text.g
              generate text.g -little > littleoutput
        #+end_src
   + 多目标虽然可以根据不同的目标使用不同的命令, 但是多目标并不能做到根据目标文件
     自动改变依赖文件, 能做到的是make的静态模式.
** 多规则目标
   + Makefile中,一个文件可以作为多个规则的目标, 也就是说比如foo.o可以作为两个
     规则的目标, (这多个规则中,只能有一个规则定义了命令). 这种情况下, 以这个文件
     为目标的规则的所有依赖文件将会被合并成一个依赖文件列表.当其中任何一个依赖文件
     比目标更新,都会触发make来重新创建这个目标
   + 对于多规则的目标,重建此目标的命令只能出现在一个规则中(可以是多条命令), 如果
     多个规则都有命令,那么make会警告,然后只使用最后一个规则给的命令.
   + 这种多规则目标其中一个常用的应用场景就是给object文件制定头文件, 比如下面的例子,
     foo.o, bar.o拥有共同的头文件config.h. 我们可以通过下面的方式来创建
     #+begin_src makefile
       objects = foo.o bar.o
       foo.o : defs.h
       bar.o : defs.h test.h
       $(objects) : config.h
     #+end_src
** 静态模式
   + 静态模式就是:规则存在于多个目标, 并且不同的目标可以根据目标文件的名字来自动构造出
     依赖文件.
*** 静态模式规则的语法
    + 静态模式和传统的模式在格式上面有所区别:
      #+begin_src makefile
        TARGEST... : TARGET-PATTERN : PREREQ-PATTERNS...
            COMMANDS
      #+end_src
    + target-pattern和prereq-pattern的意思是,为每一个目标文件生成依赖文件, target-pattern
      是对target的分析, prereq-pattern是对target-pattern的模仿. 下面就是一个如何根据foo.c
      和bar.o来生成规则依赖的例子
      #+begin_src makefile
        objects = foo.o bar.o
        all : $(objects)
        
        $(objects) : %.o : %.c
            $(CC) -c $(CFLAGS) $< -o $@
      #+end_src
    + 上面的例子中, 所有的规则都是.c生成.o. 如果规则不是统一的,那么我们可以使用filter函数,
      比如下面的例子, .c文件生成.o, .el文件生成.elc
      #+begin_src makefile
        files = foo.elc bar.o lose.o
        $(filter %.o, $(files)) : %.o : %.c
            $(CC) -c $(CFLAGS) $< -o $@
        $(filter %.elc, $(files)) : %.elc : %.el
            emacs -f batch-byte-compile $<
      #+end_src
    + 我们原来说过$@代表target, $<代表依赖, 在如今的静态模式中,我们还有一个中间变量,
      比如上面的例子中的foo和bar, 下面的例子就是对这个中间变量的利用, 其中$*就是这些
      中间变量,它代表big和little
      #+begin_src makefile
        bigoutput littleoutput : %output : text.g
            generate text.g -$* > $@
      #+end_src
*** 静态模式和隐含规则
    + 静态规则和隐含规则的相同点就是都是一种"非明确"的构建目标的方式.
    + 不同点方面:
      - 静态模式是会比隐含规则更明确 一点. 因为我们的静态模式必须把"所有的文件列出来", 
        比如上面的例子,我们要编译哪些object文件都是事先列出来的
      - 而隐含规则是可以不列出这些文件,而让系统去这个文件夹下面去探索和匹配
** 双冒号规则
   + 把单冒号改成双冒号就是双冒号规则, 这个规则就允许相同的目标出现在不同的规则里面,
     而且这些规则都可以有命令.
   + 下面这个例子Newprog就出现在了两个不同的规则里面, 而且他们都有命令. 这个双冒号
     规则就是说,如果foo.c更新了,Newprog就按照foo.c来创建. 如果bar.c更新了就按照
     bar.c来创建Newprog. 如果都更新了,就会报错
     #+begin_src makefile
       Newprog :: foo.c
           $(CC) $(CFLAGS) $< -o $@
       Newprog :: bar.c
           $(CC) $(CFLAGS) $< -o $@
     #+end_src
** 自动产生依赖
   + Makefile中有时候需要一些规则来描述.o文件和头文件的依赖关系. 比如, 在main.c
     中使用了defs.h之后, 目标main.o的规则如下:
     #+begin_src makefile
       main.o : defs.h 
     #+end_src
   + 这样对于一个大型工程,就需要在Makefile中多次书写这个依赖, 而且头文件的增加删除
     还要惊动make文件, 这本来就不是特别优雅的设计
   + 后来GNU的gcc编译器增加了 -M(所有头文件)和-MM(除了标准库以外的头文件)的两种
     参数设计, 极大的解放了生产力.
     #+begin_src c
       /* defs.h file is empty header file */
       #include "defs.h"
       #include <stdio.h>
       
       int main(int argc, char *argv[]) {
           
           return 0;
       }
     #+end_src
   + gcc -M 会产生所有的头文件依赖关系(包括头文件) 
     #+begin_src sh
       gcc -M main.c
       main.o: main.c defs.h /usr/include/stdio.h /usr/include/features.h \
        /usr/include/sys/cdefs.h /usr/include/bits/wordsize.h \
        /usr/include/gnu/stubs.h /usr/include/gnu/stubs-32.h \
        /usr/lib/gcc/i686-redhat-linux/4.4.4/include/stddef.h \
        /usr/include/bits/types.h /usr/include/bits/typesizes.h \
        /usr/include/libio.h /usr/include/_G_config.h /usr/include/wchar.h \
        /usr/lib/gcc/i686-redhat-linux/4.4.4/include/stdarg.h \
        /usr/include/bits/stdio_lim.h /usr/include/bits/sys_errlist.h 
     #+end_src
   + 而gcc -MM就不会考虑头文件啦
     #+begin_src sh
       gcc -MM main.c
       main.o: main.c defs.h
     #+end_src
   + 我们可以看到在使用gcc自动产生的依赖关系中, 所产生的规则明确的指明了目标是
     "main.o", 作为中间文件main.o在使用完之后不会被删除
   + 新版本的make中,推荐使用一个.d文件来描述每个源文件的依赖关系, 也就是说: 所有
     的.d文件依赖于同名的.c文件
     #+begin_src makefile
       CC = gcc
       CPPFLAGS =
       
       %.d: %.c
           @set -e; rm -f $@; \
           $(CC) -MM $(CPPFLAGS) $< > $@.$$$$; \
           sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
           rm -f $@.$$$$
       
       .PHONY : clean
       clean :
           rm -rf *.d *.o
     #+end_src
   + 上面的$$$$代表进程号, 首先把 "main.o : main.c defs.h"写入到以进程号来区别的
     一个临时文件中(后面的rm -f $@.$$$$会删除这个临时文件的).
   + 第三行的sed语句的作用,是把"main.o : main.c defs.h" 转化成如下的内容.这些内容
     最后都写入到了main.d文件中
     #+begin_src makefile
       main.o main.d : main.c defs.h
     #+end_src
   + 其实main.d文件就是一个小的Makefile而已(从上面的内容我们也可以发现,.d文件就是没有
     命令,只有依赖的一些规则), 所以我们可以将这些个小的makefile文件include的到大的
     Makefile文件里面. 而且鉴于.d文件中有目标,所以我们引用的时候, 一定记得在终极目标
     之后再include
     #+begin_src makefile
       sources = foo.c bar.c
       # .....
       # include these little makefiles after the first default goal
       include $(sources: .c=.d)
     #+end_src












     






         

      
